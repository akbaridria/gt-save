{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.9\"},\"sources\":{\"contracts/SwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IUniSwapV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract SwapHelper {\\n  using SafeERC20 for IERC20;\\n\\n  IUniSwapV2 univ2;\\n\\n  constructor(address _router) {\\n    univ2 = IUniSwapV2(_router);\\n  }\\n\\n  function getExchangeRate(uint256 _amount, address[] memory _path) public view returns (uint256) {\\n    return univ2.getAmountsOut(_amount, _path)[_path.length - 1];\\n  }\\n\\n  function getAmountYForX(uint256 _amount, address[] memory _path) public view returns (uint256) {\\n    return univ2.getAmountsIn(_amount, _path)[0];\\n  }\\n\\n  function swapForMatic(uint256 _amount, address[] memory _path, address _to) public payable returns (uint256) {\\n    IERC20(_path[0]).safeApprove(address(univ2), _amount);\\n    uint256[] memory amountOut = univ2.swapExactTokensForETH(_amount, getExchangeRate(_amount, _path), _path, _to, block.timestamp +  15);\\n    return amountOut[_path.length - 1];\\n  }\\n\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/IUniSwapV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniSwapV2 {\\n  function swapExactTokensForETH(\\n        uint amountIn, \\n        uint amountOutMin, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n  ) external returns (uint[] memory amounts);\\n  \\n  function getAmountsOut(\\n    uint256 amountIn, \\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(\\n    uint amountOut, \\n    address[] memory path\\n  ) external view returns (uint[] memory amounts);\\n}\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x6E9Cc4D32084992813a010A91B3c5d34d20A47c5","bytecode":"0x60806040523480156200001157600080fd5b50604051620013be380380620013be8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b611294806200012a6000396000f3fe6080604052600436106100345760003560e01c8063a45d1b4c14610039578063c0b463ad14610076578063ee037f5e146100b3575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b91906109fb565b6100e3565b60405161006d9190610a66565b60405180910390f35b34801561008257600080fd5b5061009d600480360381019061009891906109fb565b6101c5565b6040516100aa9190610a66565b60405180910390f35b6100cd60048036038101906100c89190610a81565b61029b565b6040516100da9190610a66565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f84846040518363ffffffff1660e01b8152600401610141929190610bae565b60006040518083038186803b15801561015957600080fd5b505afa15801561016d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101969190610cb6565b600183516101a49190610d2e565b815181106101b5576101b4610d62565b5b6020026020010151905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7484846040518363ffffffff1660e01b8152600401610223929190610bae565b60006040518083038186803b15801561023b57600080fd5b505afa15801561024f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102789190610cb6565b60008151811061028b5761028a610d62565b5b6020026020010151905092915050565b600061030360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685856000815181106102d6576102d5610d62565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166104079092919063ffffffff16565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318cbafe58661034d88886100e3565b8787600f4261035c9190610d91565b6040518663ffffffff1660e01b815260040161037c959493929190610df6565b600060405180830381600087803b15801561039657600080fd5b505af11580156103aa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103d39190610cb6565b905080600185516103e49190610d2e565b815181106103f5576103f4610d62565b5b60200260200101519150509392505050565b60008114806104a0575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161044e929190610e50565b60206040518083038186803b15801561046657600080fd5b505afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190610e79565b145b6104df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d690610f29565b60405180910390fd5b6105608363095ea7b360e01b84846040516024016104fe929190610f49565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610565565b505050565b60006105c7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661062c9092919063ffffffff16565b905060008151111561062757808060200190518101906105e79190610faa565b610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90611049565b60405180910390fd5b5b505050565b606061063b8484600085610644565b90509392505050565b606082471015610689576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610680906110db565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106b29190611175565b60006040518083038185875af1925050503d80600081146106ef576040519150601f19603f3d011682016040523d82523d6000602084013e6106f4565b606091505b509150915061070587838387610711565b92505050949350505050565b606083156107745760008351141561076c5761072c85610787565b61076b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610762906111d8565b60405180910390fd5b5b82905061077f565b61077e83836107aa565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156107bd5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f1919061123c565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108218161080e565b811461082c57600080fd5b50565b60008135905061083e81610818565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61089282610849565b810181811067ffffffffffffffff821117156108b1576108b061085a565b5b80604052505050565b60006108c46107fa565b90506108d08282610889565b919050565b600067ffffffffffffffff8211156108f0576108ef61085a565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061093182610906565b9050919050565b61094181610926565b811461094c57600080fd5b50565b60008135905061095e81610938565b92915050565b6000610977610972846108d5565b6108ba565b9050808382526020820190506020840283018581111561099a57610999610901565b5b835b818110156109c357806109af888261094f565b84526020840193505060208101905061099c565b5050509392505050565b600082601f8301126109e2576109e1610844565b5b81356109f2848260208601610964565b91505092915050565b60008060408385031215610a1257610a11610804565b5b6000610a208582860161082f565b925050602083013567ffffffffffffffff811115610a4157610a40610809565b5b610a4d858286016109cd565b9150509250929050565b610a608161080e565b82525050565b6000602082019050610a7b6000830184610a57565b92915050565b600080600060608486031215610a9a57610a99610804565b5b6000610aa88682870161082f565b935050602084013567ffffffffffffffff811115610ac957610ac8610809565b5b610ad5868287016109cd565b9250506040610ae68682870161094f565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b2581610926565b82525050565b6000610b378383610b1c565b60208301905092915050565b6000602082019050919050565b6000610b5b82610af0565b610b658185610afb565b9350610b7083610b0c565b8060005b83811015610ba1578151610b888882610b2b565b9750610b9383610b43565b925050600181019050610b74565b5085935050505092915050565b6000604082019050610bc36000830185610a57565b8181036020830152610bd58184610b50565b90509392505050565b600067ffffffffffffffff821115610bf957610bf861085a565b5b602082029050602081019050919050565b600081519050610c1981610818565b92915050565b6000610c32610c2d84610bde565b6108ba565b90508083825260208201905060208402830185811115610c5557610c54610901565b5b835b81811015610c7e5780610c6a8882610c0a565b845260208401935050602081019050610c57565b5050509392505050565b600082601f830112610c9d57610c9c610844565b5b8151610cad848260208601610c1f565b91505092915050565b600060208284031215610ccc57610ccb610804565b5b600082015167ffffffffffffffff811115610cea57610ce9610809565b5b610cf684828501610c88565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d398261080e565b9150610d448361080e565b925082821015610d5757610d56610cff565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d9c8261080e565b9150610da78361080e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ddc57610ddb610cff565b5b828201905092915050565b610df081610926565b82525050565b600060a082019050610e0b6000830188610a57565b610e186020830187610a57565b8181036040830152610e2a8186610b50565b9050610e396060830185610de7565b610e466080830184610a57565b9695505050505050565b6000604082019050610e656000830185610de7565b610e726020830184610de7565b9392505050565b600060208284031215610e8f57610e8e610804565b5b6000610e9d84828501610c0a565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000610f13603683610ea6565b9150610f1e82610eb7565b604082019050919050565b60006020820190508181036000830152610f4281610f06565b9050919050565b6000604082019050610f5e6000830185610de7565b610f6b6020830184610a57565b9392505050565b60008115159050919050565b610f8781610f72565b8114610f9257600080fd5b50565b600081519050610fa481610f7e565b92915050565b600060208284031215610fc057610fbf610804565b5b6000610fce84828501610f95565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611033602a83610ea6565b915061103e82610fd7565b604082019050919050565b6000602082019050818103600083015261106281611026565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006110c5602683610ea6565b91506110d082611069565b604082019050919050565b600060208201905081810360008301526110f4816110b8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561112f578082015181840152602081019050611114565b8381111561113e576000848401525b50505050565b600061114f826110fb565b6111598185611106565b9350611169818560208601611111565b80840191505092915050565b60006111818284611144565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006111c2601d83610ea6565b91506111cd8261118c565b602082019050919050565b600060208201905081810360008301526111f1816111b5565b9050919050565b600081519050919050565b600061120e826111f8565b6112188185610ea6565b9350611228818560208601611111565b61123181610849565b840191505092915050565b600060208201905081810360008301526112568184611203565b90509291505056fea2646970667358221220094b2ebce745c362526613ec4bc57bfd3bbacaa03b119d402cc31fadec8b2b8c64736f6c63430008090033","deployedBytecode":"0x6080604052600436106100345760003560e01c8063a45d1b4c14610039578063c0b463ad14610076578063ee037f5e146100b3575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b91906109fb565b6100e3565b60405161006d9190610a66565b60405180910390f35b34801561008257600080fd5b5061009d600480360381019061009891906109fb565b6101c5565b6040516100aa9190610a66565b60405180910390f35b6100cd60048036038101906100c89190610a81565b61029b565b6040516100da9190610a66565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f84846040518363ffffffff1660e01b8152600401610141929190610bae565b60006040518083038186803b15801561015957600080fd5b505afa15801561016d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101969190610cb6565b600183516101a49190610d2e565b815181106101b5576101b4610d62565b5b6020026020010151905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7484846040518363ffffffff1660e01b8152600401610223929190610bae565b60006040518083038186803b15801561023b57600080fd5b505afa15801561024f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102789190610cb6565b60008151811061028b5761028a610d62565b5b6020026020010151905092915050565b600061030360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685856000815181106102d6576102d5610d62565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166104079092919063ffffffff16565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318cbafe58661034d88886100e3565b8787600f4261035c9190610d91565b6040518663ffffffff1660e01b815260040161037c959493929190610df6565b600060405180830381600087803b15801561039657600080fd5b505af11580156103aa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103d39190610cb6565b905080600185516103e49190610d2e565b815181106103f5576103f4610d62565b5b60200260200101519150509392505050565b60008114806104a0575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161044e929190610e50565b60206040518083038186803b15801561046657600080fd5b505afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190610e79565b145b6104df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d690610f29565b60405180910390fd5b6105608363095ea7b360e01b84846040516024016104fe929190610f49565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610565565b505050565b60006105c7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661062c9092919063ffffffff16565b905060008151111561062757808060200190518101906105e79190610faa565b610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90611049565b60405180910390fd5b5b505050565b606061063b8484600085610644565b90509392505050565b606082471015610689576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610680906110db565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106b29190611175565b60006040518083038185875af1925050503d80600081146106ef576040519150601f19603f3d011682016040523d82523d6000602084013e6106f4565b606091505b509150915061070587838387610711565b92505050949350505050565b606083156107745760008351141561076c5761072c85610787565b61076b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610762906111d8565b60405180910390fd5b5b82905061077f565b61077e83836107aa565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156107bd5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f1919061123c565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108218161080e565b811461082c57600080fd5b50565b60008135905061083e81610818565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61089282610849565b810181811067ffffffffffffffff821117156108b1576108b061085a565b5b80604052505050565b60006108c46107fa565b90506108d08282610889565b919050565b600067ffffffffffffffff8211156108f0576108ef61085a565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061093182610906565b9050919050565b61094181610926565b811461094c57600080fd5b50565b60008135905061095e81610938565b92915050565b6000610977610972846108d5565b6108ba565b9050808382526020820190506020840283018581111561099a57610999610901565b5b835b818110156109c357806109af888261094f565b84526020840193505060208101905061099c565b5050509392505050565b600082601f8301126109e2576109e1610844565b5b81356109f2848260208601610964565b91505092915050565b60008060408385031215610a1257610a11610804565b5b6000610a208582860161082f565b925050602083013567ffffffffffffffff811115610a4157610a40610809565b5b610a4d858286016109cd565b9150509250929050565b610a608161080e565b82525050565b6000602082019050610a7b6000830184610a57565b92915050565b600080600060608486031215610a9a57610a99610804565b5b6000610aa88682870161082f565b935050602084013567ffffffffffffffff811115610ac957610ac8610809565b5b610ad5868287016109cd565b9250506040610ae68682870161094f565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b2581610926565b82525050565b6000610b378383610b1c565b60208301905092915050565b6000602082019050919050565b6000610b5b82610af0565b610b658185610afb565b9350610b7083610b0c565b8060005b83811015610ba1578151610b888882610b2b565b9750610b9383610b43565b925050600181019050610b74565b5085935050505092915050565b6000604082019050610bc36000830185610a57565b8181036020830152610bd58184610b50565b90509392505050565b600067ffffffffffffffff821115610bf957610bf861085a565b5b602082029050602081019050919050565b600081519050610c1981610818565b92915050565b6000610c32610c2d84610bde565b6108ba565b90508083825260208201905060208402830185811115610c5557610c54610901565b5b835b81811015610c7e5780610c6a8882610c0a565b845260208401935050602081019050610c57565b5050509392505050565b600082601f830112610c9d57610c9c610844565b5b8151610cad848260208601610c1f565b91505092915050565b600060208284031215610ccc57610ccb610804565b5b600082015167ffffffffffffffff811115610cea57610ce9610809565b5b610cf684828501610c88565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d398261080e565b9150610d448361080e565b925082821015610d5757610d56610cff565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d9c8261080e565b9150610da78361080e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ddc57610ddb610cff565b5b828201905092915050565b610df081610926565b82525050565b600060a082019050610e0b6000830188610a57565b610e186020830187610a57565b8181036040830152610e2a8186610b50565b9050610e396060830185610de7565b610e466080830184610a57565b9695505050505050565b6000604082019050610e656000830185610de7565b610e726020830184610de7565b9392505050565b600060208284031215610e8f57610e8e610804565b5b6000610e9d84828501610c0a565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000610f13603683610ea6565b9150610f1e82610eb7565b604082019050919050565b60006020820190508181036000830152610f4281610f06565b9050919050565b6000604082019050610f5e6000830185610de7565b610f6b6020830184610a57565b9392505050565b60008115159050919050565b610f8781610f72565b8114610f9257600080fd5b50565b600081519050610fa481610f7e565b92915050565b600060208284031215610fc057610fbf610804565b5b6000610fce84828501610f95565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611033602a83610ea6565b915061103e82610fd7565b604082019050919050565b6000602082019050818103600083015261106281611026565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006110c5602683610ea6565b91506110d082611069565b604082019050919050565b600060208201905081810360008301526110f4816110b8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561112f578082015181840152602081019050611114565b8381111561113e576000848401525b50505050565b600061114f826110fb565b6111598185611106565b9350611169818560208601611111565b80840191505092915050565b60006111818284611144565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006111c2601d83610ea6565b91506111cd8261118c565b602082019050919050565b600060208201905081810360008301526111f1816111b5565b9050919050565b600081519050919050565b600061120e826111f8565b6112188185610ea6565b9350611228818560208601611111565b61123181610849565b840191505092915050565b600060208201905081810360008301526112568184611203565b90509291505056fea2646970667358221220094b2ebce745c362526613ec4bc57bfd3bbacaa03b119d402cc31fadec8b2b8c64736f6c63430008090033","abi":[{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address[]","name":"_path","type":"address[]"}],"name":"getAmountYForX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address[]","name":"_path","type":"address[]"}],"name":"getExchangeRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address[]","name":"_path","type":"address[]"},{"internalType":"address","name":"_to","type":"address"}],"name":"swapForMatic","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"}]}