{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.9\"},\"sources\":{\"contracts/gt-save/GTSaveConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAxelarGateway} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\\\";\\nimport {IAxelarGasService} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\nimport {AxelarExecutable} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\\\";\\nimport \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/utils/AddressString.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../Types.sol\\\";\\n\\ncontract GTSaveConnector is AxelarExecutable {\\n  using AddressToString for address;\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IAxelarGasService gasReceiver;\\n  string public constant destChain = 'Polygon';\\n  string public constant supportedAxlToken = 'aUSDC';\\n  address public axlUsdc;\\n\\n\\n  event _pendingDeposit(address indexed _from,  uint256 _amount);\\n  event _pendingWithdraw(address indexed _from,  uint256 _amount);\\n  event _pendingClaim(address indexed _from,  uint256 _roundId );\\n\\n  constructor(address _gateway, address _gasReceiver) AxelarExecutable(_gateway){\\n    gasReceiver = IAxelarGasService(_gasReceiver);\\n    axlUsdc = gateway.tokenAddresses(supportedAxlToken);\\n  }\\n\\n  function callBridge(\\n    Types.PayGas memory payGas,\\n    Types.AxlCallWithToken memory axlCallWithToken\\n    ) internal {\\n\\n    gasReceiver.payNativeGasForContractCallWithToken{value: msg.value}(\\n      payGas.sender, \\n      payGas.destinationChain, \\n      payGas.destinationAddress, \\n      payGas.payload, \\n      payGas.symbol, \\n      payGas.amount, \\n      payGas.refundAddress\\n    );\\n    \\n    gateway.callContractWithToken(\\n      axlCallWithToken.destinationChain, \\n      axlCallWithToken.destinationAddress, \\n      axlCallWithToken.payload, \\n      axlCallWithToken.symbol, \\n      axlCallWithToken.amount\\n    );\\n\\n  }\\n\\n  function requestDeposit(uint256 amount, address destAddress) external payable {\\n    require(IERC20(axlUsdc).balanceOf(msg.sender) > amount, \\\"GTSave: insufficient balance\\\");\\n    require(msg.value > 0, \\\"GTSave: insufficient ether for axelar gas fee\\\");\\n\\n    IERC20(axlUsdc).safeTransferFrom(msg.sender, address(this), amount);\\n    IERC20(axlUsdc).safeApprove(address(gateway), amount);\\n    Types.PayloadArgs memory paramArgs = Types.PayloadArgs({\\n      user: msg.sender,\\n      amount: amount,\\n      id: 0,\\n      amountGas: 0,\\n      roundId: 0\\n    });\\n    bytes memory payload = abi.encode(paramArgs);\\n\\n    Types.PayGas memory payGas = Types.PayGas({\\n      sender: address(this),\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amount,\\n      refundAddress: msg.sender\\n    });\\n\\n    Types.AxlCallWithToken memory axlCallWithToken = Types.AxlCallWithToken({\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amount\\n    });\\n    callBridge(payGas, axlCallWithToken);\\n    emit _pendingDeposit(msg.sender, amount);\\n  }\\n\\n  function requestWithdraw(uint256 amount, uint256 amountFeeBack, address destAddress) external payable {\\n\\n    require(IERC20(axlUsdc).balanceOf(msg.sender) >= amountFeeBack, \\\"GTSave: insufficient balance\\\"); \\n    require(msg.value > 0, \\\"GTSave: insufficient ether for axelar gas fee\\\");\\n    require(amount > 0, \\\"GTSave: amount withdraw must not zero!\\\");\\n    \\n    IERC20(axlUsdc).safeTransferFrom(msg.sender, address(this), amountFeeBack);\\n    IERC20(axlUsdc).safeApprove(address(gateway), amountFeeBack);\\n    \\n    Types.PayloadArgs memory paramArgs = Types.PayloadArgs({\\n      user: msg.sender,\\n      amount: amount,\\n      id: 1,\\n      amountGas: amountFeeBack,\\n      roundId: 0\\n    });\\n    \\n    bytes memory payload = abi.encode(paramArgs);\\n\\n    Types.PayGas memory payGas = Types.PayGas({\\n      sender: address(this),\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amountFeeBack,\\n      refundAddress: msg.sender\\n    });\\n\\n    Types.AxlCallWithToken memory axlCallWithToken = Types.AxlCallWithToken({\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amountFeeBack\\n    });\\n\\n    callBridge(payGas, axlCallWithToken);\\n    emit _pendingWithdraw(msg.sender, amount);\\n  }\\n\\n  function requestClaimPrize(uint256 amountFeeBack, uint256 _roundId, address destAddress) external payable {\\n\\n    require(IERC20(axlUsdc).balanceOf(msg.sender) >= amountFeeBack, \\\"GTSave: insufficient balance\\\");\\n    require(msg.value > 0, \\\"GTSave: insufficient ether for axelar gas fee\\\");\\n    \\n    IERC20(axlUsdc).safeTransferFrom(msg.sender, address(this), amountFeeBack);\\n    IERC20(axlUsdc).safeApprove(address(gateway), amountFeeBack);\\n    \\n    Types.PayloadArgs memory paramArgs = Types.PayloadArgs({\\n      user: msg.sender,\\n      amount: 0,\\n      id: 2,\\n      amountGas: amountFeeBack,\\n      roundId: _roundId\\n    });\\n    bytes memory payload = abi.encode(paramArgs);\\n    \\n    Types.PayGas memory payGas = Types.PayGas({\\n      sender: address(this),\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amountFeeBack,\\n      refundAddress: msg.sender\\n    });\\n\\n    Types.AxlCallWithToken memory axlCallWithToken = Types.AxlCallWithToken({\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amountFeeBack\\n    });\\n\\n    callBridge(payGas, axlCallWithToken);\\n    emit _pendingClaim(msg.sender, _roundId);\\n  }\\n\\n  function _executeWithToken(\\n    string calldata ,\\n    string calldata ,\\n    bytes calldata payload,\\n    string calldata tokenSymbol,\\n    uint256 amount\\n  ) internal override {\\n    address recipient = abi.decode(payload, (address));\\n    address tokenAddress = gateway.tokenAddresses(tokenSymbol);\\n    IERC20(tokenAddress).safeTransfer(recipient, amount);\\n  }\\n\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Types {\\n\\n  struct RequestStatus {\\n    bool fulfilled;\\n    bool exists;\\n    uint256[] randomWords;\\n  }\\n\\n  struct UserData {\\n    bool isEntity;\\n    uint256 balance;\\n    uint256 oddUpdate;\\n    uint256 depositDate;\\n    DetailWin[] listWin;\\n  }\\n  \\n  struct DataWinners {\\n    bool isEntity;\\n    address winner;\\n    uint256 prize;\\n  }\\n\\n  struct PayGas {\\n    address sender;\\n    string destinationChain;\\n    string destinationAddress;\\n    bytes payload;\\n    string symbol;\\n    uint256 amount;\\n    address refundAddress;\\n  }\\n\\n  struct AxlCallWithToken {\\n    string destinationChain;\\n    string destinationAddress;\\n    bytes payload;\\n    string symbol;\\n    uint256 amount;\\n  }\\n\\n  struct ParameterWithdraw {\\n    uint256 amount;\\n    address user;\\n    address gasToken;\\n    uint256 amountGas;\\n    string sourceChain;\\n    string sourceAddress;\\n    string tokenSymbol;\\n  }\\n\\n  struct ParameterClaimPrize {\\n    address user;\\n    uint256 roundId;\\n    string sourceChain;\\n    uint256 amountGas;\\n    address gasToken;\\n    string sourceAddress;\\n    string tokenSymbol;\\n  }\\n\\n  struct PayloadArgs {\\n    address user;\\n    uint256 amount;\\n    uint256 id;\\n    uint256 amountGas;\\n    uint256 roundId;\\n  }\\n\\n  struct DetailWin {\\n    uint256 roundId;\\n    uint256 prize;\\n    bool isClaim;\\n  }\\n}\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationAddress,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\n\\ninterface IAxelarExecutable {\\n    error InvalidAddress();\\n    error NotApprovedByGateway();\\n\\n    function gateway() external view returns (IAxelarGateway);\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\\nimport { IAxelarExecutable } from '../interfaces/IAxelarExecutable.sol';\\n\\ncontract AxelarExecutable is IAxelarExecutable {\\n    IAxelarGateway public immutable gateway;\\n\\n    constructor(address gateway_) {\\n        if (gateway_ == address(0)) revert InvalidAddress();\\n\\n        gateway = IAxelarGateway(gateway_);\\n    }\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\\n            revert NotApprovedByGateway();\\n\\n        _execute(sourceChain, sourceAddress, payload);\\n    }\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (\\n            !gateway.validateContractCallAndMint(\\n                commandId,\\n                sourceChain,\\n                sourceAddress,\\n                payloadHash,\\n                tokenSymbol,\\n                amount\\n            )\\n        ) revert NotApprovedByGateway();\\n\\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\\n    }\\n\\n    function _execute(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual {}\\n\\n    function _executeWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/utils/AddressString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary StringToAddress {\\n    error InvalidAddressString();\\n\\n    function toAddress(string memory addressString) internal pure returns (address) {\\n        bytes memory stringBytes = bytes(addressString);\\n        uint160 addressNumber = 0;\\n        uint8 stringByte;\\n\\n        if (stringBytes.length != 42 || stringBytes[0] != '0' || stringBytes[1] != 'x') revert InvalidAddressString();\\n\\n        for (uint256 i = 2; i < 42; ++i) {\\n            stringByte = uint8(stringBytes[i]);\\n\\n            if ((stringByte >= 97) && (stringByte <= 102)) stringByte -= 87;\\n            else if ((stringByte >= 65) && (stringByte <= 70)) stringByte -= 55;\\n            else if ((stringByte >= 48) && (stringByte <= 57)) stringByte -= 48;\\n            else revert InvalidAddressString();\\n\\n            addressNumber |= uint160(uint256(stringByte) << ((41 - i) << 2));\\n        }\\n        return address(addressNumber);\\n    }\\n}\\n\\nlibrary AddressToString {\\n    function toString(address addr) internal pure returns (string memory) {\\n        bytes memory addressBytes = abi.encodePacked(addr);\\n        uint256 length = addressBytes.length;\\n        bytes memory characters = '0123456789abcdef';\\n        bytes memory stringBytes = new bytes(2 + addressBytes.length * 2);\\n\\n        stringBytes[0] = '0';\\n        stringBytes[1] = 'x';\\n\\n        for (uint256 i; i < length; ++i) {\\n            stringBytes[2 + i * 2] = characters[uint8(addressBytes[i] >> 4)];\\n            stringBytes[3 + i * 2] = characters[uint8(addressBytes[i] & 0x0f)];\\n        }\\n        return string(stringBytes);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService {\\n    error NothingReceived();\\n    error InvalidAddress();\\n    error NotCollector();\\n    error InvalidAmounts();\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    event ExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addExpressGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeExpressGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function collectFees(\\n        address payable receiver,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function refund(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function gasCollector() external returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x1AA715364a211D2F9DdE4B49259EF0c844742104","bytecode":"0x60a06040523480156200001157600080fd5b50604051620031b1380380620031b183398181016040528101906200003791906200028d565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000a0576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060805173ffffffffffffffffffffffffffffffffffffffff1663935b13f66040518060400160405280600581526020017f61555344430000000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b815260040162000187919062000378565b60206040518083038186803b158015620001a057600080fd5b505afa158015620001b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001db91906200039c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620003ce565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002558262000228565b9050919050565b620002678162000248565b81146200027357600080fd5b50565b60008151905062000287816200025c565b92915050565b60008060408385031215620002a757620002a662000223565b5b6000620002b78582860162000276565b9250506020620002ca8582860162000276565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000310578082015181840152602081019050620002f3565b8381111562000320576000848401525b50505050565b6000601f19601f8301169050919050565b60006200034482620002d4565b620003508185620002df565b935062000362818560208601620002f0565b6200036d8162000326565b840191505092915050565b6000602082019050818103600083015262000394818462000337565b905092915050565b600060208284031215620003b557620003b462000223565b5b6000620003c58482850162000276565b91505092915050565b608051612d966200041b600039600081816101df0152818161021f015281816104af0152818161090101528181610bed01528181610eb50152818161123201526118d50152612d966000f3fe6080604052600436106100865760003560e01c8063491606581161005957806349160658146101175780635895ebf4146101405780637a6049351461015c5780637ebff1d814610187578063bc95b3b1146101b257610086565b8063116191b61461008b5780631a98b2e0146100b657806329344f08146100df5780633b5a449a146100fb575b600080fd5b34801561009757600080fd5b506100a06101dd565b6040516100ad9190611d20565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190611e6c565b610201565b005b6100f960048036038101906100f49190611fba565b61032c565b005b61011560048036038101906101109190611ffa565b61077d565b005b34801561012357600080fd5b5061013e6004803603810190610139919061204d565b610bcf565b005b61015a60048036038101906101559190611ffa565b610cee565b005b34801561016857600080fd5b50610171611183565b60405161017e9190612125565b60405180910390f35b34801561019357600080fd5b5061019c6111a9565b6040516101a991906121d9565b60405180910390f35b3480156101be57600080fd5b506101c76111e2565b6040516101d491906121d9565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000858560405161021392919061223a565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b81526004016102869998979695949392919061229e565b602060405180830381600087803b1580156102a057600080fd5b505af11580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190612352565b61030e576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61031f8a8a8a8a8a8a8a8a8a61121b565b5050505050505050505050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103889190612125565b60206040518083038186803b1580156103a057600080fd5b505afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190612394565b11610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f9061240d565b60405180910390fd5b6000341161045b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104529061249f565b60405180910390fd5b6104aa333084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611315909392919063ffffffff16565b6105177f000000000000000000000000000000000000000000000000000000000000000083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661139e9092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160008152602001600081526020016000815250905060008160405160200161056e9190612545565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016106028673ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016106d18773ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018481526020016040518060400160405280600581526020017f61555344430000000000000000000000000000000000000000000000000000008152508152602001878152509050610727828261181f565b3373ffffffffffffffffffffffffffffffffffffffff167fd3640dcdfce724d5534c8596f8af683b6ca38f7f49db69c9b29b51b0a2929ea68760405161076d9190612560565b60405180910390a2505050505050565b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107d99190612125565b60206040518083038186803b1580156107f157600080fd5b505afa158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190612394565b101561086a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108619061240d565b60405180910390fd5b600034116108ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a49061249f565b60405180910390fd5b6108fc333085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611315909392919063ffffffff16565b6109697f000000000000000000000000000000000000000000000000000000000000000084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661139e9092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600281526020018581526020018481525090506000816040516020016109bf9190612545565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610a538673ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018781526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610b228773ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018481526020016040518060400160405280600581526020017f61555344430000000000000000000000000000000000000000000000000000008152508152602001888152509050610b78828261181f565b3373ffffffffffffffffffffffffffffffffffffffff167f1a770b22be4a0cd00dc9b3a5c7997d187c271a7066eb6d9d16a6ae6ff5c4dc9887604051610bbe9190612560565b60405180910390a250505050505050565b60008282604051610be192919061223a565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b8152600401610c4e9695949392919061257b565b602060405180830381600087803b158015610c6857600080fd5b505af1158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190612352565b610cd6576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ce487878787878761197e565b5050505050505050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610d4a9190612125565b60206040518083038186803b158015610d6257600080fd5b505afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a9190612394565b1015610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd29061240d565b60405180910390fd5b60003411610e1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e159061249f565b60405180910390fd5b60008311610e61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5890612644565b60405180910390fd5b610eb0333084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611315909392919063ffffffff16565b610f1d7f000000000000000000000000000000000000000000000000000000000000000083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661139e9092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016001815260200184815260200160008152509050600081604051602001610f739190612545565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016110078673ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016110d68773ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018481526020016040518060400160405280600581526020017f6155534443000000000000000000000000000000000000000000000000000000815250815260200187815250905061112c828261181f565b3373ffffffffffffffffffffffffffffffffffffffff167ff917a321bd8753493b20f1964aebd6735c9ea2ff460d3a6b557c593bd95122a3886040516111729190612560565b60405180910390a250505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081565b6040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081565b6000858581019061122c91906126a2565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663935b13f686866040518363ffffffff1660e01b815260040161128b9291906126cf565b60206040518083038186803b1580156112a357600080fd5b505afa1580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db9190612708565b905061130882848373ffffffffffffffffffffffffffffffffffffffff166119869092919063ffffffff16565b5050505050505050505050565b611398846323b872dd60e01b85858560405160240161133693929190612735565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a0c565b50505050565b6000811480611437575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016113e592919061276c565b60206040518083038186803b1580156113fd57600080fd5b505afa158015611411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114359190612394565b145b611476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146d90612807565b60405180910390fd5b6114f78363095ea7b360e01b8484604051602401611495929190612827565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a0c565b505050565b60606000826040516020016115119190612898565b604051602081830303815290604052905060008151905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060006002845161157291906128e2565b600261157e919061293c565b67ffffffffffffffff81111561159757611596612992565b5b6040519080825280601f01601f1916602001820160405280156115c95781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611601576116006129c1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611665576116646129c1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b83811015611812578260048683815181106116b5576116b46129c1565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff16815181106116fb576116fa6129c1565b5b602001015160f81c60f81b8260028361171491906128e2565b6002611720919061293c565b81518110611731576117306129c1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b868381518110611779576117786129c1565b5b602001015160f81c60f81b1660f81c60ff168151811061179c5761179b6129c1565b5b602001015160f81c60f81b826002836117b591906128e2565b60036117c1919061293c565b815181106117d2576117d16129c1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061180b906129f0565b9050611697565b5080945050505050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c62c200234846000015185602001518660400151876060015188608001518960a001518a60c001516040518963ffffffff1660e01b81526004016118a19796959493929190612a8e565b6000604051808303818588803b1580156118ba57600080fd5b505af11580156118ce573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b5417084826000015183602001518460400151856060015186608001516040518663ffffffff1660e01b8152600401611948959493929190612b19565b600060405180830381600087803b15801561196257600080fd5b505af1158015611976573d6000803e3d6000fd5b505050505050565b505050505050565b611a078363a9059cbb60e01b84846040516024016119a5929190612827565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a0c565b505050565b6000611a6e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ad39092919063ffffffff16565b9050600081511115611ace5780806020019051810190611a8e9190612352565b611acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac490612bfa565b60405180910390fd5b5b505050565b6060611ae28484600085611aeb565b90509392505050565b606082471015611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2790612c8c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b599190612cdd565b60006040518083038185875af1925050503d8060008114611b96576040519150601f19603f3d011682016040523d82523d6000602084013e611b9b565b606091505b5091509150611bac87838387611bb8565b92505050949350505050565b60608315611c1b57600083511415611c1357611bd385611c2e565b611c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0990612d40565b60405180910390fd5b5b829050611c26565b611c258383611c51565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611c645781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9891906121d9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611ce6611ce1611cdc84611ca1565b611cc1565b611ca1565b9050919050565b6000611cf882611ccb565b9050919050565b6000611d0a82611ced565b9050919050565b611d1a81611cff565b82525050565b6000602082019050611d356000830184611d11565b92915050565b600080fd5b600080fd5b6000819050919050565b611d5881611d45565b8114611d6357600080fd5b50565b600081359050611d7581611d4f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611da057611d9f611d7b565b5b8235905067ffffffffffffffff811115611dbd57611dbc611d80565b5b602083019150836001820283011115611dd957611dd8611d85565b5b9250929050565b60008083601f840112611df657611df5611d7b565b5b8235905067ffffffffffffffff811115611e1357611e12611d80565b5b602083019150836001820283011115611e2f57611e2e611d85565b5b9250929050565b6000819050919050565b611e4981611e36565b8114611e5457600080fd5b50565b600081359050611e6681611e40565b92915050565b60008060008060008060008060008060c08b8d031215611e8f57611e8e611d3b565b5b6000611e9d8d828e01611d66565b9a505060208b013567ffffffffffffffff811115611ebe57611ebd611d40565b5b611eca8d828e01611d8a565b995099505060408b013567ffffffffffffffff811115611eed57611eec611d40565b5b611ef98d828e01611d8a565b975097505060608b013567ffffffffffffffff811115611f1c57611f1b611d40565b5b611f288d828e01611de0565b955095505060808b013567ffffffffffffffff811115611f4b57611f4a611d40565b5b611f578d828e01611d8a565b935093505060a0611f6a8d828e01611e57565b9150509295989b9194979a5092959850565b6000611f8782611ca1565b9050919050565b611f9781611f7c565b8114611fa257600080fd5b50565b600081359050611fb481611f8e565b92915050565b60008060408385031215611fd157611fd0611d3b565b5b6000611fdf85828601611e57565b9250506020611ff085828601611fa5565b9150509250929050565b60008060006060848603121561201357612012611d3b565b5b600061202186828701611e57565b935050602061203286828701611e57565b925050604061204386828701611fa5565b9150509250925092565b60008060008060008060006080888a03121561206c5761206b611d3b565b5b600061207a8a828b01611d66565b975050602088013567ffffffffffffffff81111561209b5761209a611d40565b5b6120a78a828b01611d8a565b9650965050604088013567ffffffffffffffff8111156120ca576120c9611d40565b5b6120d68a828b01611d8a565b9450945050606088013567ffffffffffffffff8111156120f9576120f8611d40565b5b6121058a828b01611de0565b925092505092959891949750929550565b61211f81611f7c565b82525050565b600060208201905061213a6000830184612116565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561217a57808201518184015260208101905061215f565b83811115612189576000848401525b50505050565b6000601f19601f8301169050919050565b60006121ab82612140565b6121b5818561214b565b93506121c581856020860161215c565b6121ce8161218f565b840191505092915050565b600060208201905081810360008301526121f381846121a0565b905092915050565b600081905092915050565b82818337600083830152505050565b600061222183856121fb565b935061222e838584612206565b82840190509392505050565b6000612247828486612215565b91508190509392505050565b61225c81611d45565b82525050565b600061226e838561214b565b935061227b838584612206565b6122848361218f565b840190509392505050565b61229881611e36565b82525050565b600060c0820190506122b3600083018c612253565b81810360208301526122c6818a8c612262565b905081810360408301526122db81888a612262565b90506122ea6060830187612253565b81810360808301526122fd818587612262565b905061230c60a083018461228f565b9a9950505050505050505050565b60008115159050919050565b61232f8161231a565b811461233a57600080fd5b50565b60008151905061234c81612326565b92915050565b60006020828403121561236857612367611d3b565b5b60006123768482850161233d565b91505092915050565b60008151905061238e81611e40565b92915050565b6000602082840312156123aa576123a9611d3b565b5b60006123b88482850161237f565b91505092915050565b7f4754536176653a20696e73756666696369656e742062616c616e636500000000600082015250565b60006123f7601c8361214b565b9150612402826123c1565b602082019050919050565b60006020820190508181036000830152612426816123ea565b9050919050565b7f4754536176653a20696e73756666696369656e7420657468657220666f72206160008201527f78656c6172206761732066656500000000000000000000000000000000000000602082015250565b6000612489602d8361214b565b91506124948261242d565b604082019050919050565b600060208201905081810360008301526124b88161247c565b9050919050565b6124c881611f7c565b82525050565b6124d781611e36565b82525050565b60a0820160008201516124f360008501826124bf565b50602082015161250660208501826124ce565b50604082015161251960408501826124ce565b50606082015161252c60608501826124ce565b50608082015161253f60808501826124ce565b50505050565b600060a08201905061255a60008301846124dd565b92915050565b6000602082019050612575600083018461228f565b92915050565b60006080820190506125906000830189612253565b81810360208301526125a3818789612262565b905081810360408301526125b8818587612262565b90506125c76060830184612253565b979650505050505050565b7f4754536176653a20616d6f756e74207769746864726177206d757374206e6f7460008201527f207a65726f210000000000000000000000000000000000000000000000000000602082015250565b600061262e60268361214b565b9150612639826125d2565b604082019050919050565b6000602082019050818103600083015261265d81612621565b9050919050565b600061266f82611ca1565b9050919050565b61267f81612664565b811461268a57600080fd5b50565b60008135905061269c81612676565b92915050565b6000602082840312156126b8576126b7611d3b565b5b60006126c68482850161268d565b91505092915050565b600060208201905081810360008301526126ea818486612262565b90509392505050565b60008151905061270281611f8e565b92915050565b60006020828403121561271e5761271d611d3b565b5b600061272c848285016126f3565b91505092915050565b600060608201905061274a6000830186612116565b6127576020830185612116565b612764604083018461228f565b949350505050565b60006040820190506127816000830185612116565b61278e6020830184612116565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006127f160368361214b565b91506127fc82612795565b604082019050919050565b60006020820190508181036000830152612820816127e4565b9050919050565b600060408201905061283c6000830185612116565b612849602083018461228f565b9392505050565b60008160601b9050919050565b600061286882612850565b9050919050565b600061287a8261285d565b9050919050565b61289261288d82611f7c565b61286f565b82525050565b60006128a48284612881565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128ed82611e36565b91506128f883611e36565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612931576129306128b3565b5b828202905092915050565b600061294782611e36565b915061295283611e36565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612987576129866128b3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006129fb82611e36565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a2e57612a2d6128b3565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000612a6082612a39565b612a6a8185612a44565b9350612a7a81856020860161215c565b612a838161218f565b840191505092915050565b600060e082019050612aa3600083018a612116565b8181036020830152612ab581896121a0565b90508181036040830152612ac981886121a0565b90508181036060830152612add8187612a55565b90508181036080830152612af181866121a0565b9050612b0060a083018561228f565b612b0d60c0830184612116565b98975050505050505050565b600060a0820190508181036000830152612b3381886121a0565b90508181036020830152612b4781876121a0565b90508181036040830152612b5b8186612a55565b90508181036060830152612b6f81856121a0565b9050612b7e608083018461228f565b9695505050505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612be4602a8361214b565b9150612bef82612b88565b604082019050919050565b60006020820190508181036000830152612c1381612bd7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612c7660268361214b565b9150612c8182612c1a565b604082019050919050565b60006020820190508181036000830152612ca581612c69565b9050919050565b6000612cb782612a39565b612cc181856121fb565b9350612cd181856020860161215c565b80840191505092915050565b6000612ce98284612cac565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612d2a601d8361214b565b9150612d3582612cf4565b602082019050919050565b60006020820190508181036000830152612d5981612d1d565b905091905056fea26469706673582212203b2a6142ccf2ab71712e6469ea338cd3f5f5e11ae6bdb727b055bdb8194068f864736f6c63430008090033","deployedBytecode":"0x6080604052600436106100865760003560e01c8063491606581161005957806349160658146101175780635895ebf4146101405780637a6049351461015c5780637ebff1d814610187578063bc95b3b1146101b257610086565b8063116191b61461008b5780631a98b2e0146100b657806329344f08146100df5780633b5a449a146100fb575b600080fd5b34801561009757600080fd5b506100a06101dd565b6040516100ad9190611d20565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190611e6c565b610201565b005b6100f960048036038101906100f49190611fba565b61032c565b005b61011560048036038101906101109190611ffa565b61077d565b005b34801561012357600080fd5b5061013e6004803603810190610139919061204d565b610bcf565b005b61015a60048036038101906101559190611ffa565b610cee565b005b34801561016857600080fd5b50610171611183565b60405161017e9190612125565b60405180910390f35b34801561019357600080fd5b5061019c6111a9565b6040516101a991906121d9565b60405180910390f35b3480156101be57600080fd5b506101c76111e2565b6040516101d491906121d9565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000858560405161021392919061223a565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b81526004016102869998979695949392919061229e565b602060405180830381600087803b1580156102a057600080fd5b505af11580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190612352565b61030e576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61031f8a8a8a8a8a8a8a8a8a61121b565b5050505050505050505050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103889190612125565b60206040518083038186803b1580156103a057600080fd5b505afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190612394565b11610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f9061240d565b60405180910390fd5b6000341161045b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104529061249f565b60405180910390fd5b6104aa333084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611315909392919063ffffffff16565b6105177f000000000000000000000000000000000000000000000000000000000000000083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661139e9092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160008152602001600081526020016000815250905060008160405160200161056e9190612545565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016106028673ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016106d18773ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018481526020016040518060400160405280600581526020017f61555344430000000000000000000000000000000000000000000000000000008152508152602001878152509050610727828261181f565b3373ffffffffffffffffffffffffffffffffffffffff167fd3640dcdfce724d5534c8596f8af683b6ca38f7f49db69c9b29b51b0a2929ea68760405161076d9190612560565b60405180910390a2505050505050565b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107d99190612125565b60206040518083038186803b1580156107f157600080fd5b505afa158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190612394565b101561086a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108619061240d565b60405180910390fd5b600034116108ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a49061249f565b60405180910390fd5b6108fc333085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611315909392919063ffffffff16565b6109697f000000000000000000000000000000000000000000000000000000000000000084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661139e9092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600281526020018581526020018481525090506000816040516020016109bf9190612545565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610a538673ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018781526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610b228773ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018481526020016040518060400160405280600581526020017f61555344430000000000000000000000000000000000000000000000000000008152508152602001888152509050610b78828261181f565b3373ffffffffffffffffffffffffffffffffffffffff167f1a770b22be4a0cd00dc9b3a5c7997d187c271a7066eb6d9d16a6ae6ff5c4dc9887604051610bbe9190612560565b60405180910390a250505050505050565b60008282604051610be192919061223a565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b8152600401610c4e9695949392919061257b565b602060405180830381600087803b158015610c6857600080fd5b505af1158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190612352565b610cd6576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ce487878787878761197e565b5050505050505050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610d4a9190612125565b60206040518083038186803b158015610d6257600080fd5b505afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a9190612394565b1015610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd29061240d565b60405180910390fd5b60003411610e1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e159061249f565b60405180910390fd5b60008311610e61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5890612644565b60405180910390fd5b610eb0333084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611315909392919063ffffffff16565b610f1d7f000000000000000000000000000000000000000000000000000000000000000083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661139e9092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016001815260200184815260200160008152509050600081604051602001610f739190612545565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016110078673ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016110d68773ffffffffffffffffffffffffffffffffffffffff166114fc565b81526020018481526020016040518060400160405280600581526020017f6155534443000000000000000000000000000000000000000000000000000000815250815260200187815250905061112c828261181f565b3373ffffffffffffffffffffffffffffffffffffffff167ff917a321bd8753493b20f1964aebd6735c9ea2ff460d3a6b557c593bd95122a3886040516111729190612560565b60405180910390a250505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081565b6040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081565b6000858581019061122c91906126a2565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663935b13f686866040518363ffffffff1660e01b815260040161128b9291906126cf565b60206040518083038186803b1580156112a357600080fd5b505afa1580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db9190612708565b905061130882848373ffffffffffffffffffffffffffffffffffffffff166119869092919063ffffffff16565b5050505050505050505050565b611398846323b872dd60e01b85858560405160240161133693929190612735565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a0c565b50505050565b6000811480611437575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016113e592919061276c565b60206040518083038186803b1580156113fd57600080fd5b505afa158015611411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114359190612394565b145b611476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146d90612807565b60405180910390fd5b6114f78363095ea7b360e01b8484604051602401611495929190612827565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a0c565b505050565b60606000826040516020016115119190612898565b604051602081830303815290604052905060008151905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060006002845161157291906128e2565b600261157e919061293c565b67ffffffffffffffff81111561159757611596612992565b5b6040519080825280601f01601f1916602001820160405280156115c95781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611601576116006129c1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611665576116646129c1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b83811015611812578260048683815181106116b5576116b46129c1565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff16815181106116fb576116fa6129c1565b5b602001015160f81c60f81b8260028361171491906128e2565b6002611720919061293c565b81518110611731576117306129c1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b868381518110611779576117786129c1565b5b602001015160f81c60f81b1660f81c60ff168151811061179c5761179b6129c1565b5b602001015160f81c60f81b826002836117b591906128e2565b60036117c1919061293c565b815181106117d2576117d16129c1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061180b906129f0565b9050611697565b5080945050505050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c62c200234846000015185602001518660400151876060015188608001518960a001518a60c001516040518963ffffffff1660e01b81526004016118a19796959493929190612a8e565b6000604051808303818588803b1580156118ba57600080fd5b505af11580156118ce573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b5417084826000015183602001518460400151856060015186608001516040518663ffffffff1660e01b8152600401611948959493929190612b19565b600060405180830381600087803b15801561196257600080fd5b505af1158015611976573d6000803e3d6000fd5b505050505050565b505050505050565b611a078363a9059cbb60e01b84846040516024016119a5929190612827565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a0c565b505050565b6000611a6e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ad39092919063ffffffff16565b9050600081511115611ace5780806020019051810190611a8e9190612352565b611acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac490612bfa565b60405180910390fd5b5b505050565b6060611ae28484600085611aeb565b90509392505050565b606082471015611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2790612c8c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b599190612cdd565b60006040518083038185875af1925050503d8060008114611b96576040519150601f19603f3d011682016040523d82523d6000602084013e611b9b565b606091505b5091509150611bac87838387611bb8565b92505050949350505050565b60608315611c1b57600083511415611c1357611bd385611c2e565b611c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0990612d40565b60405180910390fd5b5b829050611c26565b611c258383611c51565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611c645781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9891906121d9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611ce6611ce1611cdc84611ca1565b611cc1565b611ca1565b9050919050565b6000611cf882611ccb565b9050919050565b6000611d0a82611ced565b9050919050565b611d1a81611cff565b82525050565b6000602082019050611d356000830184611d11565b92915050565b600080fd5b600080fd5b6000819050919050565b611d5881611d45565b8114611d6357600080fd5b50565b600081359050611d7581611d4f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611da057611d9f611d7b565b5b8235905067ffffffffffffffff811115611dbd57611dbc611d80565b5b602083019150836001820283011115611dd957611dd8611d85565b5b9250929050565b60008083601f840112611df657611df5611d7b565b5b8235905067ffffffffffffffff811115611e1357611e12611d80565b5b602083019150836001820283011115611e2f57611e2e611d85565b5b9250929050565b6000819050919050565b611e4981611e36565b8114611e5457600080fd5b50565b600081359050611e6681611e40565b92915050565b60008060008060008060008060008060c08b8d031215611e8f57611e8e611d3b565b5b6000611e9d8d828e01611d66565b9a505060208b013567ffffffffffffffff811115611ebe57611ebd611d40565b5b611eca8d828e01611d8a565b995099505060408b013567ffffffffffffffff811115611eed57611eec611d40565b5b611ef98d828e01611d8a565b975097505060608b013567ffffffffffffffff811115611f1c57611f1b611d40565b5b611f288d828e01611de0565b955095505060808b013567ffffffffffffffff811115611f4b57611f4a611d40565b5b611f578d828e01611d8a565b935093505060a0611f6a8d828e01611e57565b9150509295989b9194979a5092959850565b6000611f8782611ca1565b9050919050565b611f9781611f7c565b8114611fa257600080fd5b50565b600081359050611fb481611f8e565b92915050565b60008060408385031215611fd157611fd0611d3b565b5b6000611fdf85828601611e57565b9250506020611ff085828601611fa5565b9150509250929050565b60008060006060848603121561201357612012611d3b565b5b600061202186828701611e57565b935050602061203286828701611e57565b925050604061204386828701611fa5565b9150509250925092565b60008060008060008060006080888a03121561206c5761206b611d3b565b5b600061207a8a828b01611d66565b975050602088013567ffffffffffffffff81111561209b5761209a611d40565b5b6120a78a828b01611d8a565b9650965050604088013567ffffffffffffffff8111156120ca576120c9611d40565b5b6120d68a828b01611d8a565b9450945050606088013567ffffffffffffffff8111156120f9576120f8611d40565b5b6121058a828b01611de0565b925092505092959891949750929550565b61211f81611f7c565b82525050565b600060208201905061213a6000830184612116565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561217a57808201518184015260208101905061215f565b83811115612189576000848401525b50505050565b6000601f19601f8301169050919050565b60006121ab82612140565b6121b5818561214b565b93506121c581856020860161215c565b6121ce8161218f565b840191505092915050565b600060208201905081810360008301526121f381846121a0565b905092915050565b600081905092915050565b82818337600083830152505050565b600061222183856121fb565b935061222e838584612206565b82840190509392505050565b6000612247828486612215565b91508190509392505050565b61225c81611d45565b82525050565b600061226e838561214b565b935061227b838584612206565b6122848361218f565b840190509392505050565b61229881611e36565b82525050565b600060c0820190506122b3600083018c612253565b81810360208301526122c6818a8c612262565b905081810360408301526122db81888a612262565b90506122ea6060830187612253565b81810360808301526122fd818587612262565b905061230c60a083018461228f565b9a9950505050505050505050565b60008115159050919050565b61232f8161231a565b811461233a57600080fd5b50565b60008151905061234c81612326565b92915050565b60006020828403121561236857612367611d3b565b5b60006123768482850161233d565b91505092915050565b60008151905061238e81611e40565b92915050565b6000602082840312156123aa576123a9611d3b565b5b60006123b88482850161237f565b91505092915050565b7f4754536176653a20696e73756666696369656e742062616c616e636500000000600082015250565b60006123f7601c8361214b565b9150612402826123c1565b602082019050919050565b60006020820190508181036000830152612426816123ea565b9050919050565b7f4754536176653a20696e73756666696369656e7420657468657220666f72206160008201527f78656c6172206761732066656500000000000000000000000000000000000000602082015250565b6000612489602d8361214b565b91506124948261242d565b604082019050919050565b600060208201905081810360008301526124b88161247c565b9050919050565b6124c881611f7c565b82525050565b6124d781611e36565b82525050565b60a0820160008201516124f360008501826124bf565b50602082015161250660208501826124ce565b50604082015161251960408501826124ce565b50606082015161252c60608501826124ce565b50608082015161253f60808501826124ce565b50505050565b600060a08201905061255a60008301846124dd565b92915050565b6000602082019050612575600083018461228f565b92915050565b60006080820190506125906000830189612253565b81810360208301526125a3818789612262565b905081810360408301526125b8818587612262565b90506125c76060830184612253565b979650505050505050565b7f4754536176653a20616d6f756e74207769746864726177206d757374206e6f7460008201527f207a65726f210000000000000000000000000000000000000000000000000000602082015250565b600061262e60268361214b565b9150612639826125d2565b604082019050919050565b6000602082019050818103600083015261265d81612621565b9050919050565b600061266f82611ca1565b9050919050565b61267f81612664565b811461268a57600080fd5b50565b60008135905061269c81612676565b92915050565b6000602082840312156126b8576126b7611d3b565b5b60006126c68482850161268d565b91505092915050565b600060208201905081810360008301526126ea818486612262565b90509392505050565b60008151905061270281611f8e565b92915050565b60006020828403121561271e5761271d611d3b565b5b600061272c848285016126f3565b91505092915050565b600060608201905061274a6000830186612116565b6127576020830185612116565b612764604083018461228f565b949350505050565b60006040820190506127816000830185612116565b61278e6020830184612116565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006127f160368361214b565b91506127fc82612795565b604082019050919050565b60006020820190508181036000830152612820816127e4565b9050919050565b600060408201905061283c6000830185612116565b612849602083018461228f565b9392505050565b60008160601b9050919050565b600061286882612850565b9050919050565b600061287a8261285d565b9050919050565b61289261288d82611f7c565b61286f565b82525050565b60006128a48284612881565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128ed82611e36565b91506128f883611e36565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612931576129306128b3565b5b828202905092915050565b600061294782611e36565b915061295283611e36565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612987576129866128b3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006129fb82611e36565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a2e57612a2d6128b3565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000612a6082612a39565b612a6a8185612a44565b9350612a7a81856020860161215c565b612a838161218f565b840191505092915050565b600060e082019050612aa3600083018a612116565b8181036020830152612ab581896121a0565b90508181036040830152612ac981886121a0565b90508181036060830152612add8187612a55565b90508181036080830152612af181866121a0565b9050612b0060a083018561228f565b612b0d60c0830184612116565b98975050505050505050565b600060a0820190508181036000830152612b3381886121a0565b90508181036020830152612b4781876121a0565b90508181036040830152612b5b8186612a55565b90508181036060830152612b6f81856121a0565b9050612b7e608083018461228f565b9695505050505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612be4602a8361214b565b9150612bef82612b88565b604082019050919050565b60006020820190508181036000830152612c1381612bd7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612c7660268361214b565b9150612c8182612c1a565b604082019050919050565b60006020820190508181036000830152612ca581612c69565b9050919050565b6000612cb782612a39565b612cc181856121fb565b9350612cd181856020860161215c565b80840191505092915050565b6000612ce98284612cac565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612d2a601d8361214b565b9150612d3582612cf4565b602082019050919050565b60006020820190508181036000830152612d5981612d1d565b905091905056fea26469706673582212203b2a6142ccf2ab71712e6469ea338cd3f5f5e11ae6bdb727b055bdb8194068f864736f6c63430008090033","abi":[{"inputs":[{"internalType":"address","name":"_gateway","type":"address"},{"internalType":"address","name":"_gasReceiver","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"NotApprovedByGateway","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":false,"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"_pendingClaim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"_pendingDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"_pendingWithdraw","type":"event"},{"inputs":[],"name":"axlUsdc","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"destChain","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"commandId","type":"bytes32"},{"internalType":"string","name":"sourceChain","type":"string"},{"internalType":"string","name":"sourceAddress","type":"string"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"commandId","type":"bytes32"},{"internalType":"string","name":"sourceChain","type":"string"},{"internalType":"string","name":"sourceAddress","type":"string"},{"internalType":"bytes","name":"payload","type":"bytes"},{"internalType":"string","name":"tokenSymbol","type":"string"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"executeWithToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"gateway","outputs":[{"internalType":"contract IAxelarGateway","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountFeeBack","type":"uint256"},{"internalType":"uint256","name":"_roundId","type":"uint256"},{"internalType":"address","name":"destAddress","type":"address"}],"name":"requestClaimPrize","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"destAddress","type":"address"}],"name":"requestDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"amountFeeBack","type":"uint256"},{"internalType":"address","name":"destAddress","type":"address"}],"name":"requestWithdraw","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"supportedAxlToken","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]}