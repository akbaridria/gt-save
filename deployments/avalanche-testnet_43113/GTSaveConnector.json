{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.9\"},\"sources\":{\"contracts/gt-save/GTSaveConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAxelarGateway} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\\\";\\nimport {IAxelarGasService} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\nimport {AxelarExecutable} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\\\";\\nimport \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/utils/AddressString.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../Types.sol\\\";\\n\\ncontract GTSaveConnector is AxelarExecutable {\\n  using AddressToString for address;\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IAxelarGasService gasReceiver;\\n  string public constant destChain = 'Polygon';\\n  string public constant supportedAxlToken = 'aUSDC';\\n  address public axlUsdc;\\n\\n  constructor(address _gateway, address _gasReceiver) AxelarExecutable(_gateway){\\n    gasReceiver = IAxelarGasService(_gasReceiver);\\n    axlUsdc = gateway.tokenAddresses(supportedAxlToken);\\n  }\\n\\n  function callBridge(\\n    Types.PayGas memory payGas,\\n    Types.AxlCallWithToken memory axlCallWithToken\\n    ) internal {\\n\\n    gasReceiver.payNativeGasForContractCallWithToken{value: msg.value}(\\n      payGas.sender, \\n      payGas.destinationChain, \\n      payGas.destinationAddress, \\n      payGas.payload, \\n      payGas.symbol, \\n      payGas.amount, \\n      payGas.refundAddress\\n    );\\n    \\n    gateway.callContractWithToken(\\n      axlCallWithToken.destinationChain, \\n      axlCallWithToken.destinationAddress, \\n      axlCallWithToken.payload, \\n      axlCallWithToken.symbol, \\n      axlCallWithToken.amount\\n    );\\n\\n  }\\n\\n  function requestDeposit(uint256 amount, address destAddress) external payable {\\n    require(IERC20(axlUsdc).balanceOf(msg.sender) > amount, \\\"GTSave: insufficient balance\\\");\\n    require(msg.value > 0, \\\"GTSave: insufficient ether for axelar gas fee\\\");\\n\\n    IERC20(axlUsdc).safeTransferFrom(msg.sender, address(this), amount);\\n    IERC20(axlUsdc).safeApprove(address(gateway), amount);\\n    Types.PayloadArgs memory paramArgs = Types.PayloadArgs({\\n      user: msg.sender,\\n      amount: amount,\\n      id: 0,\\n      amountGas: 0,\\n      roundId: 0\\n    });\\n    bytes memory payload = abi.encode(paramArgs);\\n\\n    Types.PayGas memory payGas = Types.PayGas({\\n      sender: address(this),\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amount,\\n      refundAddress: msg.sender\\n    });\\n\\n    Types.AxlCallWithToken memory axlCallWithToken = Types.AxlCallWithToken({\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amount\\n    });\\n    callBridge(payGas, axlCallWithToken);\\n\\n  }\\n\\n  function requestWithdraw(uint256 amount, uint256 amountFeeBack, address destAddress) external payable {\\n\\n    require(IERC20(axlUsdc).balanceOf(msg.sender) >= amountFeeBack, \\\"GTSave: insufficient balance\\\"); \\n    require(msg.value > 0, \\\"GTSave: insufficient ether for axelar gas fee\\\");\\n    require(amount > 0, \\\"GTSave: amount withdraw must not zero!\\\");\\n    \\n    IERC20(axlUsdc).safeTransferFrom(msg.sender, address(this), amountFeeBack);\\n    IERC20(axlUsdc).safeApprove(address(gateway), amountFeeBack);\\n    \\n    Types.PayloadArgs memory paramArgs = Types.PayloadArgs({\\n      user: msg.sender,\\n      amount: amount,\\n      id: 1,\\n      amountGas: amountFeeBack,\\n      roundId: 0\\n    });\\n    \\n    bytes memory payload = abi.encode(paramArgs);\\n\\n    Types.PayGas memory payGas = Types.PayGas({\\n      sender: address(this),\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amountFeeBack,\\n      refundAddress: msg.sender\\n    });\\n\\n    Types.AxlCallWithToken memory axlCallWithToken = Types.AxlCallWithToken({\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amountFeeBack\\n    });\\n\\n    callBridge(payGas, axlCallWithToken);\\n  }\\n\\n  function requestClaimPrize(uint256 amountFeeBack, uint256 _roundId, address destAddress) external payable {\\n\\n    require(IERC20(axlUsdc).balanceOf(msg.sender) >= amountFeeBack, \\\"GTSave: insufficient balance\\\");\\n    require(msg.value > 0, \\\"GTSave: insufficient ether for axelar gas fee\\\");\\n    \\n    IERC20(axlUsdc).safeTransferFrom(msg.sender, address(this), amountFeeBack);\\n    IERC20(axlUsdc).safeApprove(address(gateway), amountFeeBack);\\n    \\n    Types.PayloadArgs memory paramArgs = Types.PayloadArgs({\\n      user: msg.sender,\\n      amount: 0,\\n      id: 2,\\n      amountGas: amountFeeBack,\\n      roundId: _roundId\\n    });\\n    bytes memory payload = abi.encode(paramArgs);\\n    \\n    Types.PayGas memory payGas = Types.PayGas({\\n      sender: address(this),\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amountFeeBack,\\n      refundAddress: msg.sender\\n    });\\n\\n    Types.AxlCallWithToken memory axlCallWithToken = Types.AxlCallWithToken({\\n      destinationChain: destChain,\\n      destinationAddress: destAddress.toString(),\\n      payload: payload,\\n      symbol: supportedAxlToken,\\n      amount: amountFeeBack\\n    });\\n\\n    callBridge(payGas, axlCallWithToken);\\n  }\\n\\n  function _executeWithToken(\\n    string calldata ,\\n    string calldata ,\\n    bytes calldata payload,\\n    string calldata tokenSymbol,\\n    uint256 amount\\n  ) internal override {\\n    address recipient = abi.decode(payload, (address));\\n    address tokenAddress = gateway.tokenAddresses(tokenSymbol);\\n    IERC20(tokenAddress).safeTransfer(recipient, amount);\\n  }\\n\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Types {\\n\\n  struct RequestStatus {\\n    bool fulfilled;\\n    bool exists;\\n    uint256[] randomWords;\\n  }\\n\\n  struct UserData {\\n    bool isEntity;\\n    address user;\\n    uint256 balance;\\n    uint256 oddUpdate;\\n    uint256 depositDate;\\n  }\\n  \\n  struct DataWinners {\\n    bool isEntity;\\n    address winner;\\n    uint256 prize;\\n  }\\n\\n  struct PayGas {\\n    address sender;\\n    string destinationChain;\\n    string destinationAddress;\\n    bytes payload;\\n    string symbol;\\n    uint256 amount;\\n    address refundAddress;\\n  }\\n\\n  struct AxlCallWithToken {\\n    string destinationChain;\\n    string destinationAddress;\\n    bytes payload;\\n    string symbol;\\n    uint256 amount;\\n  }\\n\\n  struct ParameterWithdraw {\\n    uint256 amount;\\n    address user;\\n    address gasToken;\\n    uint256 amountGas;\\n    string sourceChain;\\n    string sourceAddress;\\n    string tokenSymbol;\\n  }\\n\\n  struct ParameterClaimPrize {\\n    address user;\\n    uint256 roundId;\\n    string sourceChain;\\n    uint256 amountGas;\\n    address gasToken;\\n    string sourceAddress;\\n    string tokenSymbol;\\n  }\\n\\n  struct PayloadArgs {\\n    address user;\\n    uint256 amount;\\n    uint256 id;\\n    uint256 amountGas;\\n    uint256 roundId;\\n  }\\n}\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService {\\n    error NothingReceived();\\n    error InvalidAddress();\\n    error NotCollector();\\n    error InvalidAmounts();\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    event ExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addExpressGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeExpressGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function collectFees(\\n        address payable receiver,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function refund(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function gasCollector() external returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationAddress,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\n\\ninterface IAxelarExecutable {\\n    error InvalidAddress();\\n    error NotApprovedByGateway();\\n\\n    function gateway() external view returns (IAxelarGateway);\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\\nimport { IAxelarExecutable } from '../interfaces/IAxelarExecutable.sol';\\n\\ncontract AxelarExecutable is IAxelarExecutable {\\n    IAxelarGateway public immutable gateway;\\n\\n    constructor(address gateway_) {\\n        if (gateway_ == address(0)) revert InvalidAddress();\\n\\n        gateway = IAxelarGateway(gateway_);\\n    }\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\\n            revert NotApprovedByGateway();\\n\\n        _execute(sourceChain, sourceAddress, payload);\\n    }\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (\\n            !gateway.validateContractCallAndMint(\\n                commandId,\\n                sourceChain,\\n                sourceAddress,\\n                payloadHash,\\n                tokenSymbol,\\n                amount\\n            )\\n        ) revert NotApprovedByGateway();\\n\\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\\n    }\\n\\n    function _execute(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual {}\\n\\n    function _executeWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/utils/AddressString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary StringToAddress {\\n    error InvalidAddressString();\\n\\n    function toAddress(string memory addressString) internal pure returns (address) {\\n        bytes memory stringBytes = bytes(addressString);\\n        uint160 addressNumber = 0;\\n        uint8 stringByte;\\n\\n        if (stringBytes.length != 42 || stringBytes[0] != '0' || stringBytes[1] != 'x') revert InvalidAddressString();\\n\\n        for (uint256 i = 2; i < 42; ++i) {\\n            stringByte = uint8(stringBytes[i]);\\n\\n            if ((stringByte >= 97) && (stringByte <= 102)) stringByte -= 87;\\n            else if ((stringByte >= 65) && (stringByte <= 70)) stringByte -= 55;\\n            else if ((stringByte >= 48) && (stringByte <= 57)) stringByte -= 48;\\n            else revert InvalidAddressString();\\n\\n            addressNumber |= uint160(uint256(stringByte) << ((41 - i) << 2));\\n        }\\n        return address(addressNumber);\\n    }\\n}\\n\\nlibrary AddressToString {\\n    function toString(address addr) internal pure returns (string memory) {\\n        bytes memory addressBytes = abi.encodePacked(addr);\\n        uint256 length = addressBytes.length;\\n        bytes memory characters = '0123456789abcdef';\\n        bytes memory stringBytes = new bytes(2 + addressBytes.length * 2);\\n\\n        stringBytes[0] = '0';\\n        stringBytes[1] = 'x';\\n\\n        for (uint256 i; i < length; ++i) {\\n            stringBytes[2 + i * 2] = characters[uint8(addressBytes[i] >> 4)];\\n            stringBytes[3 + i * 2] = characters[uint8(addressBytes[i] & 0x0f)];\\n        }\\n        return string(stringBytes);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x668c625E4801227239e989b219fe958376531D21","bytecode":"0x60a06040523480156200001157600080fd5b50604051620030ac380380620030ac83398181016040528101906200003791906200028d565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000a0576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060805173ffffffffffffffffffffffffffffffffffffffff1663935b13f66040518060400160405280600581526020017f61555344430000000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b815260040162000187919062000378565b60206040518083038186803b158015620001a057600080fd5b505afa158015620001b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001db91906200039c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620003ce565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002558262000228565b9050919050565b620002678162000248565b81146200027357600080fd5b50565b60008151905062000287816200025c565b92915050565b60008060408385031215620002a757620002a662000223565b5b6000620002b78582860162000276565b9250506020620002ca8582860162000276565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000310578082015181840152602081019050620002f3565b8381111562000320576000848401525b50505050565b6000601f19601f8301169050919050565b60006200034482620002d4565b620003508185620002df565b935062000362818560208601620002f0565b6200036d8162000326565b840191505092915050565b6000602082019050818103600083015262000394818462000337565b905092915050565b600060208284031215620003b557620003b462000223565b5b6000620003c58482850162000276565b91505092915050565b608051612c916200041b600039600081816101df0152818161021f015281816104af015281816108b301528181610b5101528181610e190152818161114801526117eb0152612c916000f3fe6080604052600436106100865760003560e01c8063491606581161005957806349160658146101175780635895ebf4146101405780637a6049351461015c5780637ebff1d814610187578063bc95b3b1146101b257610086565b8063116191b61461008b5780631a98b2e0146100b657806329344f08146100df5780633b5a449a146100fb575b600080fd5b34801561009757600080fd5b506100a06101dd565b6040516100ad9190611c36565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190611d82565b610201565b005b6100f960048036038101906100f49190611ed0565b61032c565b005b61011560048036038101906101109190611f10565b61072f565b005b34801561012357600080fd5b5061013e60048036038101906101399190611f63565b610b33565b005b61015a60048036038101906101559190611f10565b610c52565b005b34801561016857600080fd5b50610171611099565b60405161017e919061203b565b60405180910390f35b34801561019357600080fd5b5061019c6110bf565b6040516101a991906120ef565b60405180910390f35b3480156101be57600080fd5b506101c76110f8565b6040516101d491906120ef565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60008585604051610213929190612150565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b8152600401610286999897969594939291906121b4565b602060405180830381600087803b1580156102a057600080fd5b505af11580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190612268565b61030e576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61031f8a8a8a8a8a8a8a8a8a611131565b5050505050505050505050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610388919061203b565b60206040518083038186803b1580156103a057600080fd5b505afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d891906122aa565b11610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f90612323565b60405180910390fd5b6000341161045b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610452906123b5565b60405180910390fd5b6104aa333084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661122b909392919063ffffffff16565b6105177f000000000000000000000000000000000000000000000000000000000000000083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112b49092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160008152602001600081526020016000815250905060008160405160200161056e919061245b565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016106028673ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016106d18773ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018481526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018781525090506107278282611735565b505050505050565b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161078b919061203b565b60206040518083038186803b1580156107a357600080fd5b505afa1580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db91906122aa565b101561081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081390612323565b60405180910390fd5b6000341161085f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610856906123b5565b60405180910390fd5b6108ae333085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661122b909392919063ffffffff16565b61091b7f000000000000000000000000000000000000000000000000000000000000000084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112b49092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160028152602001858152602001848152509050600081604051602001610971919061245b565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610a058673ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018781526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610ad48773ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018481526020016040518060400160405280600581526020017f61555344430000000000000000000000000000000000000000000000000000008152508152602001888152509050610b2a8282611735565b50505050505050565b60008282604051610b45929190612150565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b8152600401610bb296959493929190612476565b602060405180830381600087803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612268565b610c3a576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c48878787878787611894565b5050505050505050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610cae919061203b565b60206040518083038186803b158015610cc657600080fd5b505afa158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe91906122aa565b1015610d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3690612323565b60405180910390fd5b60003411610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d79906123b5565b60405180910390fd5b60008311610dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbc9061253f565b60405180910390fd5b610e14333084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661122b909392919063ffffffff16565b610e817f000000000000000000000000000000000000000000000000000000000000000083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112b49092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016001815260200184815260200160008152509050600081604051602001610ed7919061245b565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610f6b8673ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e00000000000000000000000000000000000000000000000000815250815260200161103a8773ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018481526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018781525090506110908282611735565b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081565b6040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081565b60008585810190611142919061259d565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663935b13f686866040518363ffffffff1660e01b81526004016111a19291906125ca565b60206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612603565b905061121e82848373ffffffffffffffffffffffffffffffffffffffff1661189c9092919063ffffffff16565b5050505050505050505050565b6112ae846323b872dd60e01b85858560405160240161124c93929190612630565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611922565b50505050565b600081148061134d575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016112fb929190612667565b60206040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906122aa565b145b61138c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138390612702565b60405180910390fd5b61140d8363095ea7b360e01b84846040516024016113ab929190612722565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611922565b505050565b60606000826040516020016114279190612793565b604051602081830303815290604052905060008151905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060006002845161148891906127dd565b60026114949190612837565b67ffffffffffffffff8111156114ad576114ac61288d565b5b6040519080825280601f01601f1916602001820160405280156114df5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611517576115166128bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061157b5761157a6128bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b83811015611728578260048683815181106115cb576115ca6128bc565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110611611576116106128bc565b5b602001015160f81c60f81b8260028361162a91906127dd565b60026116369190612837565b81518110611647576116466128bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b86838151811061168f5761168e6128bc565b5b602001015160f81c60f81b1660f81c60ff16815181106116b2576116b16128bc565b5b602001015160f81c60f81b826002836116cb91906127dd565b60036116d79190612837565b815181106116e8576116e76128bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080611721906128eb565b90506115ad565b5080945050505050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c62c200234846000015185602001518660400151876060015188608001518960a001518a60c001516040518963ffffffff1660e01b81526004016117b79796959493929190612989565b6000604051808303818588803b1580156117d057600080fd5b505af11580156117e4573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b5417084826000015183602001518460400151856060015186608001516040518663ffffffff1660e01b815260040161185e959493929190612a14565b600060405180830381600087803b15801561187857600080fd5b505af115801561188c573d6000803e3d6000fd5b505050505050565b505050505050565b61191d8363a9059cbb60e01b84846040516024016118bb929190612722565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611922565b505050565b6000611984826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119e99092919063ffffffff16565b90506000815111156119e457808060200190518101906119a49190612268565b6119e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119da90612af5565b60405180910390fd5b5b505050565b60606119f88484600085611a01565b90509392505050565b606082471015611a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3d90612b87565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a6f9190612bd8565b60006040518083038185875af1925050503d8060008114611aac576040519150601f19603f3d011682016040523d82523d6000602084013e611ab1565b606091505b5091509150611ac287838387611ace565b92505050949350505050565b60608315611b3157600083511415611b2957611ae985611b44565b611b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1f90612c3b565b60405180910390fd5b5b829050611b3c565b611b3b8383611b67565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611b7a5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae91906120ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611bfc611bf7611bf284611bb7565b611bd7565b611bb7565b9050919050565b6000611c0e82611be1565b9050919050565b6000611c2082611c03565b9050919050565b611c3081611c15565b82525050565b6000602082019050611c4b6000830184611c27565b92915050565b600080fd5b600080fd5b6000819050919050565b611c6e81611c5b565b8114611c7957600080fd5b50565b600081359050611c8b81611c65565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611cb657611cb5611c91565b5b8235905067ffffffffffffffff811115611cd357611cd2611c96565b5b602083019150836001820283011115611cef57611cee611c9b565b5b9250929050565b60008083601f840112611d0c57611d0b611c91565b5b8235905067ffffffffffffffff811115611d2957611d28611c96565b5b602083019150836001820283011115611d4557611d44611c9b565b5b9250929050565b6000819050919050565b611d5f81611d4c565b8114611d6a57600080fd5b50565b600081359050611d7c81611d56565b92915050565b60008060008060008060008060008060c08b8d031215611da557611da4611c51565b5b6000611db38d828e01611c7c565b9a505060208b013567ffffffffffffffff811115611dd457611dd3611c56565b5b611de08d828e01611ca0565b995099505060408b013567ffffffffffffffff811115611e0357611e02611c56565b5b611e0f8d828e01611ca0565b975097505060608b013567ffffffffffffffff811115611e3257611e31611c56565b5b611e3e8d828e01611cf6565b955095505060808b013567ffffffffffffffff811115611e6157611e60611c56565b5b611e6d8d828e01611ca0565b935093505060a0611e808d828e01611d6d565b9150509295989b9194979a5092959850565b6000611e9d82611bb7565b9050919050565b611ead81611e92565b8114611eb857600080fd5b50565b600081359050611eca81611ea4565b92915050565b60008060408385031215611ee757611ee6611c51565b5b6000611ef585828601611d6d565b9250506020611f0685828601611ebb565b9150509250929050565b600080600060608486031215611f2957611f28611c51565b5b6000611f3786828701611d6d565b9350506020611f4886828701611d6d565b9250506040611f5986828701611ebb565b9150509250925092565b60008060008060008060006080888a031215611f8257611f81611c51565b5b6000611f908a828b01611c7c565b975050602088013567ffffffffffffffff811115611fb157611fb0611c56565b5b611fbd8a828b01611ca0565b9650965050604088013567ffffffffffffffff811115611fe057611fdf611c56565b5b611fec8a828b01611ca0565b9450945050606088013567ffffffffffffffff81111561200f5761200e611c56565b5b61201b8a828b01611cf6565b925092505092959891949750929550565b61203581611e92565b82525050565b6000602082019050612050600083018461202c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612090578082015181840152602081019050612075565b8381111561209f576000848401525b50505050565b6000601f19601f8301169050919050565b60006120c182612056565b6120cb8185612061565b93506120db818560208601612072565b6120e4816120a5565b840191505092915050565b6000602082019050818103600083015261210981846120b6565b905092915050565b600081905092915050565b82818337600083830152505050565b60006121378385612111565b935061214483858461211c565b82840190509392505050565b600061215d82848661212b565b91508190509392505050565b61217281611c5b565b82525050565b60006121848385612061565b935061219183858461211c565b61219a836120a5565b840190509392505050565b6121ae81611d4c565b82525050565b600060c0820190506121c9600083018c612169565b81810360208301526121dc818a8c612178565b905081810360408301526121f181888a612178565b90506122006060830187612169565b8181036080830152612213818587612178565b905061222260a08301846121a5565b9a9950505050505050505050565b60008115159050919050565b61224581612230565b811461225057600080fd5b50565b6000815190506122628161223c565b92915050565b60006020828403121561227e5761227d611c51565b5b600061228c84828501612253565b91505092915050565b6000815190506122a481611d56565b92915050565b6000602082840312156122c0576122bf611c51565b5b60006122ce84828501612295565b91505092915050565b7f4754536176653a20696e73756666696369656e742062616c616e636500000000600082015250565b600061230d601c83612061565b9150612318826122d7565b602082019050919050565b6000602082019050818103600083015261233c81612300565b9050919050565b7f4754536176653a20696e73756666696369656e7420657468657220666f72206160008201527f78656c6172206761732066656500000000000000000000000000000000000000602082015250565b600061239f602d83612061565b91506123aa82612343565b604082019050919050565b600060208201905081810360008301526123ce81612392565b9050919050565b6123de81611e92565b82525050565b6123ed81611d4c565b82525050565b60a08201600082015161240960008501826123d5565b50602082015161241c60208501826123e4565b50604082015161242f60408501826123e4565b50606082015161244260608501826123e4565b50608082015161245560808501826123e4565b50505050565b600060a08201905061247060008301846123f3565b92915050565b600060808201905061248b6000830189612169565b818103602083015261249e818789612178565b905081810360408301526124b3818587612178565b90506124c26060830184612169565b979650505050505050565b7f4754536176653a20616d6f756e74207769746864726177206d757374206e6f7460008201527f207a65726f210000000000000000000000000000000000000000000000000000602082015250565b6000612529602683612061565b9150612534826124cd565b604082019050919050565b600060208201905081810360008301526125588161251c565b9050919050565b600061256a82611bb7565b9050919050565b61257a8161255f565b811461258557600080fd5b50565b60008135905061259781612571565b92915050565b6000602082840312156125b3576125b2611c51565b5b60006125c184828501612588565b91505092915050565b600060208201905081810360008301526125e5818486612178565b90509392505050565b6000815190506125fd81611ea4565b92915050565b60006020828403121561261957612618611c51565b5b6000612627848285016125ee565b91505092915050565b6000606082019050612645600083018661202c565b612652602083018561202c565b61265f60408301846121a5565b949350505050565b600060408201905061267c600083018561202c565b612689602083018461202c565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006126ec603683612061565b91506126f782612690565b604082019050919050565b6000602082019050818103600083015261271b816126df565b9050919050565b6000604082019050612737600083018561202c565b61274460208301846121a5565b9392505050565b60008160601b9050919050565b60006127638261274b565b9050919050565b600061277582612758565b9050919050565b61278d61278882611e92565b61276a565b82525050565b600061279f828461277c565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127e882611d4c565b91506127f383611d4c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561282c5761282b6127ae565b5b828202905092915050565b600061284282611d4c565b915061284d83611d4c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612882576128816127ae565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006128f682611d4c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612929576129286127ae565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b600061295b82612934565b612965818561293f565b9350612975818560208601612072565b61297e816120a5565b840191505092915050565b600060e08201905061299e600083018a61202c565b81810360208301526129b081896120b6565b905081810360408301526129c481886120b6565b905081810360608301526129d88187612950565b905081810360808301526129ec81866120b6565b90506129fb60a08301856121a5565b612a0860c083018461202c565b98975050505050505050565b600060a0820190508181036000830152612a2e81886120b6565b90508181036020830152612a4281876120b6565b90508181036040830152612a568186612950565b90508181036060830152612a6a81856120b6565b9050612a7960808301846121a5565b9695505050505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612adf602a83612061565b9150612aea82612a83565b604082019050919050565b60006020820190508181036000830152612b0e81612ad2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612b71602683612061565b9150612b7c82612b15565b604082019050919050565b60006020820190508181036000830152612ba081612b64565b9050919050565b6000612bb282612934565b612bbc8185612111565b9350612bcc818560208601612072565b80840191505092915050565b6000612be48284612ba7565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c25601d83612061565b9150612c3082612bef565b602082019050919050565b60006020820190508181036000830152612c5481612c18565b905091905056fea2646970667358221220e4646824edbed050b0028975347ccdf4d4b0314b79b543689be3dd80282f44ac64736f6c63430008090033","deployedBytecode":"0x6080604052600436106100865760003560e01c8063491606581161005957806349160658146101175780635895ebf4146101405780637a6049351461015c5780637ebff1d814610187578063bc95b3b1146101b257610086565b8063116191b61461008b5780631a98b2e0146100b657806329344f08146100df5780633b5a449a146100fb575b600080fd5b34801561009757600080fd5b506100a06101dd565b6040516100ad9190611c36565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190611d82565b610201565b005b6100f960048036038101906100f49190611ed0565b61032c565b005b61011560048036038101906101109190611f10565b61072f565b005b34801561012357600080fd5b5061013e60048036038101906101399190611f63565b610b33565b005b61015a60048036038101906101559190611f10565b610c52565b005b34801561016857600080fd5b50610171611099565b60405161017e919061203b565b60405180910390f35b34801561019357600080fd5b5061019c6110bf565b6040516101a991906120ef565b60405180910390f35b3480156101be57600080fd5b506101c76110f8565b6040516101d491906120ef565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60008585604051610213929190612150565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b8152600401610286999897969594939291906121b4565b602060405180830381600087803b1580156102a057600080fd5b505af11580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190612268565b61030e576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61031f8a8a8a8a8a8a8a8a8a611131565b5050505050505050505050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610388919061203b565b60206040518083038186803b1580156103a057600080fd5b505afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d891906122aa565b11610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f90612323565b60405180910390fd5b6000341161045b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610452906123b5565b60405180910390fd5b6104aa333084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661122b909392919063ffffffff16565b6105177f000000000000000000000000000000000000000000000000000000000000000083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112b49092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160008152602001600081526020016000815250905060008160405160200161056e919061245b565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016106028673ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081526020016106d18773ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018481526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018781525090506107278282611735565b505050505050565b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161078b919061203b565b60206040518083038186803b1580156107a357600080fd5b505afa1580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db91906122aa565b101561081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081390612323565b60405180910390fd5b6000341161085f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610856906123b5565b60405180910390fd5b6108ae333085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661122b909392919063ffffffff16565b61091b7f000000000000000000000000000000000000000000000000000000000000000084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112b49092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160028152602001858152602001848152509050600081604051602001610971919061245b565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610a058673ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018781526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610ad48773ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018481526020016040518060400160405280600581526020017f61555344430000000000000000000000000000000000000000000000000000008152508152602001888152509050610b2a8282611735565b50505050505050565b60008282604051610b45929190612150565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b8152600401610bb296959493929190612476565b602060405180830381600087803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612268565b610c3a576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c48878787878787611894565b5050505050505050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610cae919061203b565b60206040518083038186803b158015610cc657600080fd5b505afa158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe91906122aa565b1015610d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3690612323565b60405180910390fd5b60003411610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d79906123b5565b60405180910390fd5b60008311610dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbc9061253f565b60405180910390fd5b610e14333084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661122b909392919063ffffffff16565b610e817f000000000000000000000000000000000000000000000000000000000000000083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112b49092919063ffffffff16565b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016001815260200184815260200160008152509050600081604051602001610ed7919061245b565b604051602081830303815290604052905060006040518060e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600781526020017f506f6c79676f6e000000000000000000000000000000000000000000000000008152508152602001610f6b8673ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018381526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060a001604052806040518060400160405280600781526020017f506f6c79676f6e00000000000000000000000000000000000000000000000000815250815260200161103a8773ffffffffffffffffffffffffffffffffffffffff16611412565b81526020018481526020016040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081526020018781525090506110908282611735565b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600581526020017f615553444300000000000000000000000000000000000000000000000000000081525081565b6040518060400160405280600781526020017f506f6c79676f6e0000000000000000000000000000000000000000000000000081525081565b60008585810190611142919061259d565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663935b13f686866040518363ffffffff1660e01b81526004016111a19291906125ca565b60206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612603565b905061121e82848373ffffffffffffffffffffffffffffffffffffffff1661189c9092919063ffffffff16565b5050505050505050505050565b6112ae846323b872dd60e01b85858560405160240161124c93929190612630565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611922565b50505050565b600081148061134d575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016112fb929190612667565b60206040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906122aa565b145b61138c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138390612702565b60405180910390fd5b61140d8363095ea7b360e01b84846040516024016113ab929190612722565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611922565b505050565b60606000826040516020016114279190612793565b604051602081830303815290604052905060008151905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060006002845161148891906127dd565b60026114949190612837565b67ffffffffffffffff8111156114ad576114ac61288d565b5b6040519080825280601f01601f1916602001820160405280156114df5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611517576115166128bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061157b5761157a6128bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b83811015611728578260048683815181106115cb576115ca6128bc565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110611611576116106128bc565b5b602001015160f81c60f81b8260028361162a91906127dd565b60026116369190612837565b81518110611647576116466128bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b86838151811061168f5761168e6128bc565b5b602001015160f81c60f81b1660f81c60ff16815181106116b2576116b16128bc565b5b602001015160f81c60f81b826002836116cb91906127dd565b60036116d79190612837565b815181106116e8576116e76128bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080611721906128eb565b90506115ad565b5080945050505050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c62c200234846000015185602001518660400151876060015188608001518960a001518a60c001516040518963ffffffff1660e01b81526004016117b79796959493929190612989565b6000604051808303818588803b1580156117d057600080fd5b505af11580156117e4573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b5417084826000015183602001518460400151856060015186608001516040518663ffffffff1660e01b815260040161185e959493929190612a14565b600060405180830381600087803b15801561187857600080fd5b505af115801561188c573d6000803e3d6000fd5b505050505050565b505050505050565b61191d8363a9059cbb60e01b84846040516024016118bb929190612722565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611922565b505050565b6000611984826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119e99092919063ffffffff16565b90506000815111156119e457808060200190518101906119a49190612268565b6119e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119da90612af5565b60405180910390fd5b5b505050565b60606119f88484600085611a01565b90509392505050565b606082471015611a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3d90612b87565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a6f9190612bd8565b60006040518083038185875af1925050503d8060008114611aac576040519150601f19603f3d011682016040523d82523d6000602084013e611ab1565b606091505b5091509150611ac287838387611ace565b92505050949350505050565b60608315611b3157600083511415611b2957611ae985611b44565b611b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1f90612c3b565b60405180910390fd5b5b829050611b3c565b611b3b8383611b67565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611b7a5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae91906120ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611bfc611bf7611bf284611bb7565b611bd7565b611bb7565b9050919050565b6000611c0e82611be1565b9050919050565b6000611c2082611c03565b9050919050565b611c3081611c15565b82525050565b6000602082019050611c4b6000830184611c27565b92915050565b600080fd5b600080fd5b6000819050919050565b611c6e81611c5b565b8114611c7957600080fd5b50565b600081359050611c8b81611c65565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611cb657611cb5611c91565b5b8235905067ffffffffffffffff811115611cd357611cd2611c96565b5b602083019150836001820283011115611cef57611cee611c9b565b5b9250929050565b60008083601f840112611d0c57611d0b611c91565b5b8235905067ffffffffffffffff811115611d2957611d28611c96565b5b602083019150836001820283011115611d4557611d44611c9b565b5b9250929050565b6000819050919050565b611d5f81611d4c565b8114611d6a57600080fd5b50565b600081359050611d7c81611d56565b92915050565b60008060008060008060008060008060c08b8d031215611da557611da4611c51565b5b6000611db38d828e01611c7c565b9a505060208b013567ffffffffffffffff811115611dd457611dd3611c56565b5b611de08d828e01611ca0565b995099505060408b013567ffffffffffffffff811115611e0357611e02611c56565b5b611e0f8d828e01611ca0565b975097505060608b013567ffffffffffffffff811115611e3257611e31611c56565b5b611e3e8d828e01611cf6565b955095505060808b013567ffffffffffffffff811115611e6157611e60611c56565b5b611e6d8d828e01611ca0565b935093505060a0611e808d828e01611d6d565b9150509295989b9194979a5092959850565b6000611e9d82611bb7565b9050919050565b611ead81611e92565b8114611eb857600080fd5b50565b600081359050611eca81611ea4565b92915050565b60008060408385031215611ee757611ee6611c51565b5b6000611ef585828601611d6d565b9250506020611f0685828601611ebb565b9150509250929050565b600080600060608486031215611f2957611f28611c51565b5b6000611f3786828701611d6d565b9350506020611f4886828701611d6d565b9250506040611f5986828701611ebb565b9150509250925092565b60008060008060008060006080888a031215611f8257611f81611c51565b5b6000611f908a828b01611c7c565b975050602088013567ffffffffffffffff811115611fb157611fb0611c56565b5b611fbd8a828b01611ca0565b9650965050604088013567ffffffffffffffff811115611fe057611fdf611c56565b5b611fec8a828b01611ca0565b9450945050606088013567ffffffffffffffff81111561200f5761200e611c56565b5b61201b8a828b01611cf6565b925092505092959891949750929550565b61203581611e92565b82525050565b6000602082019050612050600083018461202c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612090578082015181840152602081019050612075565b8381111561209f576000848401525b50505050565b6000601f19601f8301169050919050565b60006120c182612056565b6120cb8185612061565b93506120db818560208601612072565b6120e4816120a5565b840191505092915050565b6000602082019050818103600083015261210981846120b6565b905092915050565b600081905092915050565b82818337600083830152505050565b60006121378385612111565b935061214483858461211c565b82840190509392505050565b600061215d82848661212b565b91508190509392505050565b61217281611c5b565b82525050565b60006121848385612061565b935061219183858461211c565b61219a836120a5565b840190509392505050565b6121ae81611d4c565b82525050565b600060c0820190506121c9600083018c612169565b81810360208301526121dc818a8c612178565b905081810360408301526121f181888a612178565b90506122006060830187612169565b8181036080830152612213818587612178565b905061222260a08301846121a5565b9a9950505050505050505050565b60008115159050919050565b61224581612230565b811461225057600080fd5b50565b6000815190506122628161223c565b92915050565b60006020828403121561227e5761227d611c51565b5b600061228c84828501612253565b91505092915050565b6000815190506122a481611d56565b92915050565b6000602082840312156122c0576122bf611c51565b5b60006122ce84828501612295565b91505092915050565b7f4754536176653a20696e73756666696369656e742062616c616e636500000000600082015250565b600061230d601c83612061565b9150612318826122d7565b602082019050919050565b6000602082019050818103600083015261233c81612300565b9050919050565b7f4754536176653a20696e73756666696369656e7420657468657220666f72206160008201527f78656c6172206761732066656500000000000000000000000000000000000000602082015250565b600061239f602d83612061565b91506123aa82612343565b604082019050919050565b600060208201905081810360008301526123ce81612392565b9050919050565b6123de81611e92565b82525050565b6123ed81611d4c565b82525050565b60a08201600082015161240960008501826123d5565b50602082015161241c60208501826123e4565b50604082015161242f60408501826123e4565b50606082015161244260608501826123e4565b50608082015161245560808501826123e4565b50505050565b600060a08201905061247060008301846123f3565b92915050565b600060808201905061248b6000830189612169565b818103602083015261249e818789612178565b905081810360408301526124b3818587612178565b90506124c26060830184612169565b979650505050505050565b7f4754536176653a20616d6f756e74207769746864726177206d757374206e6f7460008201527f207a65726f210000000000000000000000000000000000000000000000000000602082015250565b6000612529602683612061565b9150612534826124cd565b604082019050919050565b600060208201905081810360008301526125588161251c565b9050919050565b600061256a82611bb7565b9050919050565b61257a8161255f565b811461258557600080fd5b50565b60008135905061259781612571565b92915050565b6000602082840312156125b3576125b2611c51565b5b60006125c184828501612588565b91505092915050565b600060208201905081810360008301526125e5818486612178565b90509392505050565b6000815190506125fd81611ea4565b92915050565b60006020828403121561261957612618611c51565b5b6000612627848285016125ee565b91505092915050565b6000606082019050612645600083018661202c565b612652602083018561202c565b61265f60408301846121a5565b949350505050565b600060408201905061267c600083018561202c565b612689602083018461202c565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006126ec603683612061565b91506126f782612690565b604082019050919050565b6000602082019050818103600083015261271b816126df565b9050919050565b6000604082019050612737600083018561202c565b61274460208301846121a5565b9392505050565b60008160601b9050919050565b60006127638261274b565b9050919050565b600061277582612758565b9050919050565b61278d61278882611e92565b61276a565b82525050565b600061279f828461277c565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127e882611d4c565b91506127f383611d4c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561282c5761282b6127ae565b5b828202905092915050565b600061284282611d4c565b915061284d83611d4c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612882576128816127ae565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006128f682611d4c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612929576129286127ae565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b600061295b82612934565b612965818561293f565b9350612975818560208601612072565b61297e816120a5565b840191505092915050565b600060e08201905061299e600083018a61202c565b81810360208301526129b081896120b6565b905081810360408301526129c481886120b6565b905081810360608301526129d88187612950565b905081810360808301526129ec81866120b6565b90506129fb60a08301856121a5565b612a0860c083018461202c565b98975050505050505050565b600060a0820190508181036000830152612a2e81886120b6565b90508181036020830152612a4281876120b6565b90508181036040830152612a568186612950565b90508181036060830152612a6a81856120b6565b9050612a7960808301846121a5565b9695505050505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612adf602a83612061565b9150612aea82612a83565b604082019050919050565b60006020820190508181036000830152612b0e81612ad2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612b71602683612061565b9150612b7c82612b15565b604082019050919050565b60006020820190508181036000830152612ba081612b64565b9050919050565b6000612bb282612934565b612bbc8185612111565b9350612bcc818560208601612072565b80840191505092915050565b6000612be48284612ba7565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c25601d83612061565b9150612c3082612bef565b602082019050919050565b60006020820190508181036000830152612c5481612c18565b905091905056fea2646970667358221220e4646824edbed050b0028975347ccdf4d4b0314b79b543689be3dd80282f44ac64736f6c63430008090033","abi":[{"inputs":[{"internalType":"address","name":"_gateway","type":"address"},{"internalType":"address","name":"_gasReceiver","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"NotApprovedByGateway","type":"error"},{"inputs":[],"name":"axlUsdc","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"destChain","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"commandId","type":"bytes32"},{"internalType":"string","name":"sourceChain","type":"string"},{"internalType":"string","name":"sourceAddress","type":"string"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"commandId","type":"bytes32"},{"internalType":"string","name":"sourceChain","type":"string"},{"internalType":"string","name":"sourceAddress","type":"string"},{"internalType":"bytes","name":"payload","type":"bytes"},{"internalType":"string","name":"tokenSymbol","type":"string"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"executeWithToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"gateway","outputs":[{"internalType":"contract IAxelarGateway","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountFeeBack","type":"uint256"},{"internalType":"uint256","name":"_roundId","type":"uint256"},{"internalType":"address","name":"destAddress","type":"address"}],"name":"requestClaimPrize","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"destAddress","type":"address"}],"name":"requestDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"amountFeeBack","type":"uint256"},{"internalType":"address","name":"destAddress","type":"address"}],"name":"requestWithdraw","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"supportedAxlToken","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]}